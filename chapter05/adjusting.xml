<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../general.ent">
  %general-entities;
]>

<sect1 id="ch-tools-adjusting">
  <?dbhtml filename="adjusting.html"?>

  <title>调节工具链</title>

  <para>现在临时的 C 库已经安装好了，在本章剩余部分编译的所有工具都应该链接至这些库。要实现这一点，跨平台编译器的 specs 文件需要修改以指向位于 <filename class="directory">/tools</filename> 的新的动态链接器。</para>

  <para>通过转储编译器的 <quote>specs</quote> 文件至一个会被默认找到的位置。然后应用一次简单的 <command>sed</command> 替换来调节 Gcc 使用的动态链接器。此处的目的是找到所有到 <filename class="directory">/lib</filename> 或者 64 位兼容宿主系统上的 <filename class="directory">/lib64</filename> 中动态链接器的提及并调节它们指向 <filename class="directory">/tools</filename> 中的新位置。</para>

  <para>For the sake of accuracy, it is recommended to use a copy-and-paste
  method when issuing the following command. Be sure to visually inspect the
  specs file to verify that it has properly adjusted all references to the
  dynamic linker location. Refer to <xref
    linkend="ch-tools-toolchaintechnotes" role=","/> for the default name
  of the dynamic linker, if necessary.</para>

<!-- Ampersands are needed to allow copy and paste -->
<screen><userinput>SPECS=`dirname $($LFS_TGT-gcc -print-libgcc-file-name)`/specs
$LFS_TGT-gcc -dumpspecs | sed \
  -e 's@/lib\(64\)\?/ld@/tools&amp;@g' \
  -e "/^\*cpp:$/{n;s,$, -isystem /tools/include,}" &gt; $SPECS 
echo "New specs file is: $SPECS"
unset SPECS</userinput></screen>

  <caution>
    <para>At this point, it is imperative to stop and ensure that the basic
    functions (compiling and linking) of the new toolchain are working as
    expected. To perform a sanity check, run the following commands:</para>

<screen><userinput>echo 'main(){}' &gt; dummy.c
$LFS_TGT-gcc -B/tools/lib dummy.c
readelf -l a.out | grep ': /tools'</userinput></screen>

    <para>If everything is working correctly, there should be no errors,
    and the output of the last command will be of the form:</para>

<screen><computeroutput>[Requesting program interpreter: /tools/lib/ld-linux.so.2]</computeroutput></screen>

    <para>Note that <filename class="directory">/tools/lib</filename>, or
    <filename class="directory">/tools/lib64</filename> for 64-bit machines
    appears as the prefix of the dynamic linker.</para>

    <para>If the output is not shown as above or there was no output at all,
    then something is wrong. Investigate and retrace the steps to find out
    where the problem is and correct it. This issue must be resolved before
    continuing on. Something may have gone wrong with the
    specs file amendment above. In this case, redo the specs file amendment,
    being careful to copy-and-paste the commands.</para>

    <para>Once all is well, clean up the test files:</para>

<screen><userinput>rm -v dummy.c a.out</userinput></screen>

  </caution>

  <note><para>Building Binutils in the next section will serve as an additional check that
  the toolchain has been built properly. If Binutils fails to build, it is an
  indication that something has gone wrong with the previous Binutils, GCC, or Glibc
  installations.</para></note>

</sect1>
